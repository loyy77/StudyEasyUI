/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.16
 * Generated at: 2011-09-24 03:04:44 UTC
 */
package org.apache.jsp.demo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class remote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.List<java.lang.String> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.List<java.lang.String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("\t\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>validate验证框架演示</title>\r\n");
      out.write("\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/><meta http-equiv=\"Page-Enter\" content=\"revealTrans(duration=1, transition=2)\"/><meta http-equiv=\"Page-Exit\" content=\"revealTrans(duration=1, transition=2)\"/>\r\n");
      out.write("\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"../js/validate/css/validate.css\" /> \r\n");
      out.write("\t\t<script src=\"../js/validate/talent-validate-all.js\" language=\"javascript\"></script><script src=\"./demo.js\" language=\"javascript\"></script>  <!-- 第一步 -->\r\n");
      out.write("\t\t</head><body>\r\n");
      out.write("\t\t\t<form name=\"form1\" id='form1'>\r\n");
      out.write("\t\t\t\t用户名和密码都是talent时通过，否则不通过<span style='color:red;font-size:14pt'>(本页面需要服务器支持)</span>\r\n");
      out.write("\t\t\t\t<br/>\r\n");
      out.write("\t\t\t\t<br/>\r\n");
      out.write("\t\t\t\t<span id='usernameId'>用户名</span><input type=\"text\" value=\"talent\" id='username' name=\"username\" />\r\n");
      out.write("\t\t\t\t<br/>\r\n");
      out.write("\t\t\t\t密码<input type=\"text\" value=\"2\" id='password' name=\"password\"/>\r\n");
      out.write("\t\t\t\t<br/>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<input type=\"button\" class='button' value=\"验证\" onclick=\"tt.validate();\"/>\r\n");
      out.write("\t\t\t\t<input type=\"button\" class='button' value=\"取消验证\" onclick=\"remoteV.rm();\"/>\r\n");
      out.write("\t\t\t\t<input type=\"button\" class='button' value=\"添加验证\" onclick=\"remoteV.add();\"/>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<div id=\"passwordMsgid\"></div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t<pre name='code' class='java'>\r\n");
      out.write("\t/**\r\n");
      out.write("\t  * 服务端代码，输出格式形如：\r\n");
      out.write("\t  {\r\n");
      out.write("\t\t  'username':{'result':true,'msg':'用户[talent]存在!'},\r\n");
      out.write("\t\t  'password':{'result':false,'msg':'密码不正确!'}\r\n");
      out.write("\t  }\r\n");
      out.write("\t  **/\r\n");
      out.write("\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\r\n");
      out.write("\t\tString name = req.getParameter(\"username\");\r\n");
      out.write("\t\tString pwd = req.getParameter(\"password\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tresp.setCharacterEncoding(\"utf-8\");\r\n");
      out.write("\t\tPrintWriter out = resp.getWriter();\r\n");
      out.write("\t\tMap&lt;String, TalentValidateResult> resultMap = new HashMap&lt;String, TalentValidateResult>();\r\n");
      out.write("\t\tif (\"talent\".equals(name) ) {\r\n");
      out.write("\t\t\tresultMap.put(\"username\", new TalentValidateResult(true, \"用户[\"+name+\"]存在!\"));\r\n");
      out.write("\t\t\tif (\"talent\".equals(pwd)) {\r\n");
      out.write("\t\t\t\tresultMap.put(\"password\", new TalentValidateResult(true, \"密码正确!\"));\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tresultMap.put(\"password\", new TalentValidateResult(false, \"密码不正确!(在指定的位置显示信息)\", \"passwordMsgid\"));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * \"id:usernameId\"：在id指定的位置提示信息\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tresultMap.put(\"id:usernameId\", new TalentValidateResult(false, \"用户[\"+name+\"]不存在!(和指定的id绑定)\"));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tout.print(JSON.toJSONString(resultMap));\r\n");
      out.write("\t}\r\n");
      out.write("\t</pre>\r\n");
      out.write("\t\t</body>\r\n");
      out.write("\t\r\n");
      out.write("\t\t<!-- 第二步 -->\r\n");
      out.write("\t\t<script id=\"talent_script\">\r\n");
      out.write("\t\t\t/**\r\n");
      out.write("\t\t\t * 自带了一个ajax框架\r\n");
      out.write("\t\t\t */\r\n");
      out.write("\t\t\tvar ajaxConfig = {\r\n");
      out.write("\t\t\t\tformId: 'form1',      //要提交的form\r\n");
      out.write("\t\t\t\turl : \"");
      out.print(request.getContextPath());
      out.write("/RemoteValidatorDemo\"\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar remoteV = new tt.RemoteV().set(ajaxConfig);       //服务端验证勿需调用add()方法；取消验证：remoteV.rm(); 添加验证：remoteV.add();\r\n");
      out.write("\t\t</script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
